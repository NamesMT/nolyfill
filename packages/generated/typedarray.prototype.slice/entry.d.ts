declare const _default: import("@nolyfill/shared").DefineEsShim<((start?: number, end?: number) => BigInt64Array<ArrayBuffer>) | ((start?: number, end?: number) => BigUint64Array<ArrayBuffer>) | ((start?: number, end?: number) => Float32Array<ArrayBuffer>) | ((start?: number, end?: number) => Float64Array<ArrayBuffer>) | ((start?: number, end?: number) => Int8Array<ArrayBuffer>) | ((start?: number, end?: number) => Int16Array<ArrayBuffer>) | ((start?: number, end?: number) => Int32Array<ArrayBuffer>) | ((start?: number, end?: number) => Uint8Array<ArrayBuffer>) | ((start?: number, end?: number) => Uint8ClampedArray<ArrayBuffer>) | ((start?: number, end?: number) => Uint16Array<ArrayBuffer>) | ((start?: number, end?: number) => Uint32Array<ArrayBuffer>), import("@nolyfill/shared").UncurryThis<((start?: number, end?: number) => BigInt64Array<ArrayBuffer>) | ((start?: number, end?: number) => BigUint64Array<ArrayBuffer>) | ((start?: number, end?: number) => Float32Array<ArrayBuffer>) | ((start?: number, end?: number) => Float64Array<ArrayBuffer>) | ((start?: number, end?: number) => Int8Array<ArrayBuffer>) | ((start?: number, end?: number) => Int16Array<ArrayBuffer>) | ((start?: number, end?: number) => Int32Array<ArrayBuffer>) | ((start?: number, end?: number) => Uint8Array<ArrayBuffer>) | ((start?: number, end?: number) => Uint8ClampedArray<ArrayBuffer>) | ((start?: number, end?: number) => Uint16Array<ArrayBuffer>) | ((start?: number, end?: number) => Uint32Array<ArrayBuffer>)>>;
export default _default;
